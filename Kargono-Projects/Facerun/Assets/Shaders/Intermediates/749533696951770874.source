// Rendering Type: DrawTriangle
// Color Type: VertexColor
// Draw Outline: false
//============================================================
// vertex shader
//============================================================
#type vertex
#version 450 core

struct VertexOutput
{
	vec4 Color;
	vec2 TexCoord;
	float TilingFactor;
};

layout(location = 0) in vec3 a_Position;
layout(location = 1) in vec4 a_Color;
layout(location = 2) in int a_EntityID;
layout(location = 3) in vec2 a_TexCoord;
layout(location = 4) in float a_TexIndex;
layout(location = 5) in float a_TilingFactor;
layout(std140, binding = 0) uniform Camera
{
mat4 u_ViewProjection;
};
layout(location = 0) out VertexOutput Output;
layout (location = 3) out flat int v_EntityID;
layout (location = 4) out flat float v_TexIndex;

void main()
{
	gl_Position = vec4(a_Position, 1.0);
	Output.Color = a_Color;
	Output.TexCoord = a_TexCoord;
	Output.TilingFactor = a_TilingFactor;
	v_TexIndex = a_TexIndex;
	gl_Position = u_ViewProjection * gl_Position;
	v_EntityID = a_EntityID;
}


//============================================================
// fragment shader
//============================================================
#type fragment
#version 450 core

struct VertexOutput
{
	vec4 Color;
	vec2 TexCoord;
	float TilingFactor;
};

layout(location = 0) in VertexOutput Input;
layout (location = 3) in flat int v_EntityID;
layout (location = 4) in flat float v_TexIndex;
layout(binding = 0) uniform sampler2D u_Textures[32];
layout(location = 0) out vec4 o_Color;
layout(location = 1) out int o_EntityID;

vec4 GetTextureColor(vec2 texCoordinate)
{
	vec4 texColor;
	switch (int(v_TexIndex))
	{
		case  0: texColor = texture(u_Textures[0], texCoordinate); break;
		case  1: texColor = texture(u_Textures[1], texCoordinate); break;
		case  2: texColor = texture(u_Textures[2], texCoordinate); break;
		case  3: texColor = texture(u_Textures[3], texCoordinate); break;
		case  4: texColor = texture(u_Textures[4], texCoordinate); break;
		case  5: texColor = texture(u_Textures[5], texCoordinate); break;
		case  6: texColor = texture(u_Textures[6], texCoordinate); break;
		case  7: texColor = texture(u_Textures[7], texCoordinate); break;
		case  8: texColor = texture(u_Textures[8], texCoordinate); break;
		case  9: texColor = texture(u_Textures[9], texCoordinate); break;
		case 10: texColor = texture(u_Textures[10], texCoordinate); break;
		case 11: texColor = texture(u_Textures[11], texCoordinate); break;
		case 12: texColor = texture(u_Textures[12], texCoordinate); break;
		case 13: texColor = texture(u_Textures[13], texCoordinate); break;
		case 14: texColor = texture(u_Textures[14], texCoordinate); break;
		case 15: texColor = texture(u_Textures[15], texCoordinate); break;
		case 16: texColor = texture(u_Textures[16], texCoordinate); break;
		case 17: texColor = texture(u_Textures[17], texCoordinate); break;
		case 18: texColor = texture(u_Textures[18], texCoordinate); break;
		case 19: texColor = texture(u_Textures[19], texCoordinate); break;
		case 20: texColor = texture(u_Textures[20], texCoordinate); break;
		case 21: texColor = texture(u_Textures[21], texCoordinate); break;
		case 22: texColor = texture(u_Textures[22], texCoordinate); break;
		case 23: texColor = texture(u_Textures[23], texCoordinate); break;
		case 24: texColor = texture(u_Textures[24], texCoordinate); break;
		case 25: texColor = texture(u_Textures[25], texCoordinate); break;
		case 26: texColor = texture(u_Textures[26], texCoordinate); break;
		case 27: texColor = texture(u_Textures[27], texCoordinate); break;
		case 28: texColor = texture(u_Textures[28], texCoordinate); break;
		case 29: texColor = texture(u_Textures[29], texCoordinate); break;
		case 30: texColor = texture(u_Textures[30], texCoordinate); break;
		case 31: texColor = texture(u_Textures[31], texCoordinate); break;
	}
	return texColor;
}

void main()
{
	o_Color = vec4(1.0f, 1.0f, 1.0f, 1.0f);
	vec2 texCoordinate = Input.TexCoord;
	texCoordinate = texCoordinate * Input.TilingFactor;
	vec4 texColor = GetTextureColor(texCoordinate);
	o_Color *= texColor;
	o_Color *= Input.Color;
	o_EntityID = v_EntityID;
	if (o_Color.a <= 0.3)
	{
		discard;
	}
}

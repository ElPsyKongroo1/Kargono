// Rendering Type: DrawIndex
// Color Type: VertexColor
// Draw Outline: false
//============================================================
// vertex shader
//============================================================
#type vertex
#version 450 core

struct VertexOutput
{
	vec4 Color;
	vec3 LocalPosition;
	float Thickness;
	float Fade;
};

layout(location = 0) in vec3 a_Position;
layout(location = 1) in vec3 a_LocalPosition;
layout(location = 2) in float a_Thickness;
layout(location = 3) in float a_Fade;
layout(location = 4) in vec4 a_Color;
layout(std140, binding = 0) uniform Camera
{
mat4 u_ViewProjection;
};
layout(location = 0) out VertexOutput Output;

void main()
{
	gl_Position = vec4(a_Position, 1.0);
	Output.Color = a_Color;
	Output.LocalPosition = a_LocalPosition;
	Output.Thickness = a_Thickness;
	Output.Fade = a_Fade;
	gl_Position = u_ViewProjection * gl_Position;
}


//============================================================
// fragment shader
//============================================================
#type fragment
#version 450 core

struct VertexOutput
{
	vec4 Color;
	vec3 LocalPosition;
	float Thickness;
	float Fade;
};

layout(location = 0) in VertexOutput Input;
layout(location = 0) out vec4 o_Color;

float CalculateCircle(vec3 localPosition, float thickness, float fade)
{
	float distance = 1.0 - length(localPosition);
	float circle = smoothstep(0.0, fade, distance);
	circle *= smoothstep(thickness + fade, thickness, distance);
	if (circle < 0.01) { discard; }
	return circle;
}

void main()
{
	o_Color = vec4(1.0f, 1.0f, 1.0f, 1.0f);
	float circle = CalculateCircle(Input.LocalPosition, Input.Thickness, Input.Fade);
	o_Color *= Input.Color;
	o_Color.a *= circle;
}

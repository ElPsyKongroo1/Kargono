#pragma once

#include "Kargono/Scene/Components.h"
#include "Kargono/Events/ApplicationEvent.h"
#include "Kargono/Core/Timestep.h"
#include "Kargono/Core/Base.h"

#include "glm/glm.hpp"
#include "box2d/b2_body.h"
#include "box2d/b2_world_callbacks.h"

namespace Kargono::Utils
{
	//============================================================
	// Conversion Functions
	//============================================================
	// Functions to convert between box2d enums and Kargono enums
	inline static b2BodyType Rigidbody2DTypeToBox2DBody(Rigidbody2DComponent::BodyType bodyType)
	{
		switch (bodyType)
		{
		case Rigidbody2DComponent::BodyType::Static:	return b2_staticBody;
		case Rigidbody2DComponent::BodyType::Dynamic:	return b2_dynamicBody;
		case Rigidbody2DComponent::BodyType::Kinematic:	return b2_kinematicBody;
		}
		KG_CORE_ASSERT(false, "Unknown body type");
		return b2_staticBody;
	}

	inline static Rigidbody2DComponent::BodyType Rigidbody2DTypeFromBox2DBody(b2BodyType bodyType)
	{
		switch (bodyType)
		{
		case b2_staticBody:		return  Rigidbody2DComponent::BodyType::Static;
		case b2_dynamicBody:	return  Rigidbody2DComponent::BodyType::Dynamic;
		case b2_kinematicBody:	return  Rigidbody2DComponent::BodyType::Kinematic;
		}
		KG_CORE_ASSERT(false, "Unknown body type");
		return Rigidbody2DComponent::BodyType::Static;
	}
}

namespace Kargono
{
	//============================================================
	// Contact Listener Class
	//============================================================
	// This class enables the dispatching of collision events (generated by the PhysicsWorld)
	//		to the application event handling system. The contact listener is registered with
	//		the physics world and then receives collision events through the implemented function
	//		BeginContact. A Callback function is previously registered with the ContactListener
	//		which is then called during a collision event.
	class ContactListener : public b2ContactListener
	{
	public:
		using EventCallbackFn = std::function<void(Event&)>;
		//=========================
		// Constructor(s)
		//=========================
		// This constructor simply calls its parent class's constructor
		ContactListener();
		//=========================
		// Callback Event
		//=========================
		// This function sets the callback function that will back called with the PhysicsCollisionEvent
		//		as the parameter when a collision occurs.
		void SetEventCallback(const EventCallbackFn& callback) { m_CallbackFunc = callback; }
		//=========================
		// Collision Detection
		//=========================
		// Implemented function that receives box2d physics event through V-table.
		virtual void BeginContact(b2Contact* contact) override;
	private:
		// Event callback function pointer
		EventCallbackFn m_CallbackFunc;
	};

	class Scene;

	struct PhysicsSpecification
	{
		glm::vec2 Gravity = { 0.0f, 0.0f };
	};

	//============================================================
	// Physics2D World Class
	//============================================================
	class Physics2DWorld
	{
	public:
		Physics2DWorld(Scene* scene, const glm::vec2& gravity);
		~Physics2DWorld();

		void OnUpdate(Timestep ts);
		void SetGravity(const glm::vec2& gravity);
	private:
		// Underlying physics world implementation
		Scope<b2World> m_PhysicsWorld = nullptr;
		Scene* m_Scene = nullptr;
		Scope<ContactListener> m_ContactListener = nullptr;
	};
}
